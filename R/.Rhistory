zero.line=c(TRUE, FALSE), reversescale = FALSE,
colorscale=list(list(0, 'rgba(255,255,255, 0.1)'), list(1, 'rgba(255,0,0, 1)')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(TRUE, FALSE), reversescale = FALSE,
colorscale=list(list(0, 'rgb(255,255,255)'), list(1, 'rgb(255,0,0)')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, lines(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, 'rgb(255,255,255)'), list(1, 'rgb(255,0,0)')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, 'rgb(255,255,255)'), list(1, 'rgb(255,0,0)')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#0000FF'), list(1, '#FF0000')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#0000FF00'), list(1, '#FF0000')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#0000FF22'), list(1, '#FF0000')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(1, '#FF0000')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.5, '#880000')), list(1, '#FF0000')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.5, '#880000'), list(1, '#FF0000')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.9, '#880000'), list(1, '#FF0000')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#880000'), list(1, '#FF0000')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#880000'), list(1, '#FF6666')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#883333'), list(1, '#FF6666')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF2222', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#883333'), list(1, '#FF2222')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#880000', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#883333'), list(1, '#FF2222')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF6666', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#883333'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF8888', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=npoints, col.mark = '#FF8888', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2));
devtools::install_local('~/Documents/awsomicsR/')
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
zero.line=c(FALSE, FALSE), reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2));
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2));
devtools::install_local('~/Documents/awsomicsR/')
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2));
devtools::install_local('~/Documents/awsomicsR/')
summary(sz)
min(sz)
min(sz[sz>0])
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2));
devtools::install_local('~/Documents/awsomicsR/')
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2));
devtools::install_local('~/Documents/awsomicsR/')
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2));
devtools::install_local('~/Documents/awsomicsR/')
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2));
marker=list(symbol=0, txt=names(x), npoints=2000, size=rep(5, length(x)), col.mark='#2222FFFF', line=TRUE)
if (marker$line) w <- 0.5 else w <- 0;
w
devtools::install_local('~/Documents/awsomicsR/')
args(PlotlyContourScatter)
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
marker=list(txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2, line=TRUE));
devtools::install_local('~/Documents/awsomicsR/')
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, line=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2, line=TRUE);
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, lines=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2, marker.line=TRUE);
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, lines=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
txt=names(fc), npoints=round(length(x)/20), col.mark = '#FF8888', size=sz, symbol=2, marker.line=FALSE);
dim(s)
dim(res)
names(res)
dim(res)
str(res)
dim(tbl)
x <- log2(tbl[, 1]+1)
y <- log2(tbl[, 2]+2)
if (is.na(xlab) | xlab=='') xlab <- 'Log2(average expression)';
if (is.na(ylab) | ylab=='') ylab <- 'Log10(p value)';
i <- which(!is.na(x) & !is.na(p) & p>=0 & p<=1 & x>-Inf & x<Inf);
x <- x[i];
p <- p[i];
y <- -1*log10(p);
z <- max(y, na.rm=TRUE);
y[y==Inf] <- floor(max(y[y<Inf])) + 1.25;
lo  <- lowess(y~x);
lox <- lo[[1]];
loy <- lo[[2]];
if (length(x) >= 1000) {
i <- round(seq(1, length(y), length.out = 1000));
lox <- lox[i];
loy <- loy[i];
}
xl <- range(x, na.rm=TRUE);
yl <- c(0, max(abs(y), na.rm=TRUE));
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
x <- x/2+y/2
summary(x)
p <- tbl[, 5]
if (is.na(xlab) | xlab=='') xlab <- 'Log2(average expression)';
if (is.na(ylab) | ylab=='') ylab <- 'Log10(p value)';
i <- which(!is.na(x) & !is.na(p) & p>=0 & p<=1 & x>-Inf & x<Inf);
x <- x[i];
p <- p[i];
y <- -1*log10(p);
z <- max(y, na.rm=TRUE);
y[y==Inf] <- floor(max(y[y<Inf])) + 1.25;
lo  <- lowess(y~x);
lox <- lo[[1]];
loy <- lo[[2]];
if (length(x) >= 1000) {
i <- round(seq(1, length(y), length.out = 1000));
lox <- lox[i];
loy <- loy[i];
}
xl <- range(x, na.rm=TRUE);
yl <- c(0, max(abs(y), na.rm=TRUE));
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz <- c(sz, 0,0,0,0);
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
PlotlyContourScatter(x, y, xlab='Log2(fold change)', ylab='-Log10(p value)', xlim=xlim, ylim=ylim,
reversescale = FALSE, lines=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#FF4444'), list(1, '#FF8888')),
txt=names(fc), npoints=npoints, col.mark = '#FF8888', size=sz, symbol=2, marker.line=FALSE);
summary(x)
summary(y)
xl
yl
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl,
reversescale = FALSE, #lines=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')),
txt=names(x), npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
xlab <- 'Log2(average expression)';
ylab <- 'Log10(p value)';
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl,
reversescale = FALSE, #lines=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')),
txt=names(x), npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
npoints
xl <- range(x, na.rm=TRUE);
yl <- c(0, 0.2+max(abs(y), na.rm=TRUE));
xl[2] <- 0.2+xl[2];
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz <- c(sz, 0,0,0,0);
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl,
reversescale = FALSE, #lines=list(c(0, 0), c(0, ylim[2])),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')),
txt=names(x), npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = list(x=lox, y=loy),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')),txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
y <- tbl[, 4]
require(awsomics);
if (is.na(xlab) | xlab=='') xlab <- 'Log2(average expression)';
if (is.na(ylab) | ylab=='') ylab <- 'Log2(fold change)';
i <- which(!is.na(x) & !is.na(y) & x>-Inf & x<Inf & y>-Inf & y<Inf);
x <- x[i];
y <- y[i];
z <- max(abs(y), na.rm=TRUE);
lo  <- lowess(y~x);
lox <- lo[[1]];
loy <- lo[[2]];
if (length(x) >= 1000) {
i <- round(seq(1, length(y), length.out = 1000));
lox <- lox[i];
loy <- loy[i];
}
xlab <- 'Log2(average expression)';
ylab <- 'Log2(fold change)';
require(plotly);
xl <- range(x, na.rm=TRUE);
yl <- c(-max(abs(y), na.rm=TRUE), max(abs(y), na.rm=TRUE));
xl[2] <- 0.2+xl[2];
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz <- c(sz, 0,0,0,0);
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = list(x=lox, y=loy),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')),txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
xl
yl
xl <- range(x, na.rm=TRUE);
yl <- c(-max(abs(y), na.rm=TRUE), max(abs(y), na.rm=TRUE));
xl[1] <- xl[1] - 0.1
xl[2] <- xl[2] + 0.1;
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz <- c(sz, 0,0,0,0);
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = list(x=lox, y=loy),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')),txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
xl <- range(x, na.rm=TRUE);
yl <- c(-max(abs(y), na.rm=TRUE), max(abs(y), na.rm=TRUE));
xl[1] <- xl[1] - 0.1
xl[2] <- xl[2] + 0.1;
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz <- c(sz, 0,0,0,0);
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, #line = list(x=lox, y=loy),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')),txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
head(x)
npoints
sz
summary(sz)
summary(z)
summary(z)
summary(x)
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
summary(sz)
summary(y)
xl <- range(x, na.rm=TRUE);
yl <- c(-max(abs(y), na.rm=TRUE), max(abs(y), na.rm=TRUE));
xl[1] <- xl[1] - 0.1
xl[2] <- xl[2] + 0.1;
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz <- c(sz, 0,0,0,0);
sz[is.na(sz)] <- 0;
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, #line = list(x=lox, y=loy),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
summary(x)
summary(y)
y <- tbl[, 5]
y <- tbl[, 4]
summary(y)
x <- log2(rowMeans(tbl[, 1:2])+1)
summary(x)
summary(y)
if (is.na(xlab) | xlab=='') xlab <- 'Log2(average expression)';
if (is.na(ylab) | ylab=='') ylab <- 'Log2(fold change)';
i <- which(!is.na(x) & !is.na(y) & x>-Inf & x<Inf & y>-Inf & y<Inf);
x <- x[i];
y <- y[i];
z <- max(abs(y), na.rm=TRUE);
lo  <- lowess(y~x);
lox <- lo[[1]];
loy <- lo[[2]];
if (length(x) >= 1000) {
i <- round(seq(1, length(y), length.out = 1000));
lox <- lox[i];
loy <- loy[i];
}
require(plotly);
xl <- range(x, na.rm=TRUE);
yl <- c(-max(abs(y), na.rm=TRUE), max(abs(y), na.rm=TRUE));
xl[1] <- xl[1] - 0.1
xl[2] <- xl[2] + 0.1;
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz <- c(sz, 0,0,0,0);
sz[is.na(sz)] <- 0;
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, #line = list(x=lox, y=loy),
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
lines <- list(x=list(lox, c(0, xl[2])), y=list(loy, c(0, 0)));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
lines <- list(x=list(lox, c(0, xl[2])), y=list(loy, c(0, 0)));
lines <- list(lox, loy);
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
lines <- list(x=list(lox, c(0, xl[2])), y=list(loy, c(0, 0)));
lines <- list(c(0, xl[2]), c(0, 0));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
lines <- list(x=list(lox, c(0, xl[2])), y=list(loy, c(0, 0)));
length(lines)==2
xs <- lines[[1]];
ys <- lines[[2]];
str(xs)
length(xs)
length(ys)
length(xs)==length(ys)
if (is.vector(xs)) xs <- list(x=xs);
if (is.vector(ys)) ys <- list(y=ys);
str(xs)
xs[[1]]
lines <- list(list(lox, c(0, xl[2])), list(loy, c(0, 0)));
xs <- lines[[1]]
str(xs)
lines <- list(list(lox, c(0, xl[2])), list(loy, c(0, 0)));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
xs <- lines[[1]];
ys <- lines[[2]];
str(xs)
xs[[2]]
ys[[2]]
p <- plot_ly(x=x, y=y, type='histogram2dcontour', ncontours=ncontours, showscale=FALSE, hoverinfo='none',
colorscale = colorscale, reversescale=reversescale, contours=list(showlines=FALSE));
p <- add_markers(p, x = x[sel], y = y[sel], type='scatter', text=txt[sel], hoverinfo="text", marker=mrk);
p
if (length(lines)==2) {
xs <- lines[[1]];
ys <- lines[[2]];
if (length(xs)==length(ys)) {
if (is.vector(xs)) xs <- list(x=xs);
if (is.vector(ys)) ys <- list(y=ys);
for (i in 1:length(xs)) p <- add_lines(p, x=xs[[i]], y=ys[[i]], text='');
}
};
str(p)
p <- layout(p, xaxis=xa, yaxis=ya, showlegend=FALSE);
p;
p <- plot_ly(x=x, y=y, type='histogram2dcontour', ncontours=ncontours, showscale=FALSE, hoverinfo='none',
colorscale = colorscale, reversescale=reversescale, contours=list(showlines=FALSE));
p <- add_markers(p, x = x[sel], y = y[sel], type='scatter', text=txt[sel], hoverinfo="text", marker=mrk);
# Add line
if (length(lines)==2) {
xs <- lines[[1]];
ys <- lines[[2]];
if (length(xs)==length(ys)) {
if (is.vector(xs)) xs <- list(x=xs);
if (is.vector(ys)) ys <- list(y=ys);
p <- add_lines(p, x=xs[[1]], y=ys[[1]]);
# for (i in 1:length(xs)) p <- add_lines(p, x=xs[[i]], y=ys[[i]], text='');
}
};
p <- layout(p, xaxis=xa, yaxis=ya, showlegend=FALSE);
p;
str(xs)
lines <- list(list(lox, c(0, xl[2])), list(loy, c(0, 0)));
xs <- lines[[1]];
ys <- lines[[2]];
str(xs)
p <- add_lines(p, x=xs[[1]], y=ys[[1]]);
p <- layout(p, xaxis=xa, yaxis=ya, showlegend=FALSE);
p;
is.vector(xs)
str(xs)
!is.list(xs)
p <- plot_ly(x=x, y=y, type='histogram2dcontour', ncontours=ncontours, showscale=FALSE, hoverinfo='none',
colorscale = colorscale, reversescale=reversescale, contours=list(showlines=FALSE));
p <- add_markers(p, x = x[sel], y = y[sel], type='scatter', text=txt[sel], hoverinfo="text", marker=mrk);
# Add line
if (length(lines)==2) {
xs <- lines[[1]];
ys <- lines[[2]];
if (length(xs)==length(ys)) {
if (!is.list(xs)) xs <- list(x=xs);
if (!is.list(ys)) ys <- list(y=ys);
for (i in 1:length(xs)) p <- add_lines(p, x=xs[[i]], y=ys[[i]], text='');
}
};
p <- layout(p, xaxis=xa, yaxis=ya, showlegend=FALSE);
p;
xl <- range(x, na.rm=TRUE);
yl <- c(-max(abs(y), na.rm=TRUE), max(abs(y), na.rm=TRUE));
xl[1] <- xl[1] - 0.1
xl[2] <- xl[2] + 0.1;
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz <- c(sz, 0,0,0,0);
sz[is.na(sz)] <- 0;
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
lines <- list(list(lox, c(0, xl[2])), list(loy, c(0, 0)));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
str(lines)
devtools::install_local('~/Documents/awsomicsR/')
xl <- range(x, na.rm=TRUE);
yl <- c(-max(abs(y), na.rm=TRUE), max(abs(y), na.rm=TRUE));
xl[1] <- xl[1] - 0.1
xl[2] <- xl[2] + 0.1;
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz <- c(sz, 0,0,0,0);
sz[is.na(sz)] <- 0;
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
lines <- list(list(lox, c(0, xl[2])), list(loy, c(0, 0)));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
x <- log2(rowMeans(tbl[, 1:2]))
y <- tbl[, 4]
if (is.na(xlab) | xlab=='') xlab <- 'Log2(average expression)';
if (is.na(ylab) | ylab=='') ylab <- 'Log2(fold change)';
i <- which(!is.na(x) & !is.na(y) & x>-Inf & x<Inf & y>-Inf & y<Inf);
x <- x[i];
y <- y[i];
z <- max(abs(y), na.rm=TRUE);
lo  <- lowess(y~x);
lox <- lo[[1]];
loy <- lo[[2]];
if (length(x) >= 1000) {
i <- round(seq(1, length(y), length.out = 1000));
lox <- lox[i];
loy <- loy[i];
}
require(plotly);
xl <- range(x, na.rm=TRUE);
yl <- c(-max(abs(y), na.rm=TRUE), max(abs(y), na.rm=TRUE));
xl[1] <- xl[1] - 0.1
xl[2] <- xl[2] + 0.1;
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz[is.na(sz)] <- 0;
sz <- c(sz, 0,0,0,0);
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
lines <- list(list(lox, c(0, xl[2])), list(loy, c(0, 0)));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,d
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
lines <- list(list(lox, c(0, xl[2])), list(loy, c(0, 0)));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
x <- log2(rowMeans(tbl[, 1:2]))
y <- tbl[, 4]
xl <- range(x, na.rm=TRUE);
yl <- c(-max(abs(y), na.rm=TRUE), max(abs(y), na.rm=TRUE));
yl[1] <- yl[1] - 0.1
yl[2] <- yl[2] + 0.1
xl[2] <- xl[2] + 0.1;
sz <- abs(y/z)*10*(5-max(1, min(4, round(log10(length(x))))));
sz[is.na(sz)] <- 0;
sz <- c(sz, 0,0,0,0);
x <- c(x, xl, xl);
y <- c(y, yl[1], yl[2], yl[1], yl[2]);
lines <- list(list(lox, c(-Inf, xl[2])), list(loy, c(0, 0)));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
lines <- list(list(lox, c(-Inf, Inf)), list(loy, c(0, 0)));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
lines <- list(list(lox, c(xl[1]-100, xl[2]+100)), list(loy, c(0, 0)));
PlotlyContourScatter(x, y, xlab=xlab, ylab=ylab, xlim=xl, ylim=yl, reversescale = FALSE, line = lines,
colorscale=list(list(0, '#FFFFFF'), list(.1, '#4444FF'), list(1, '#8888FF')), txt=names(x),
npoints=npoints, col.mark = '#8888FF', size=sz, symbol=0, marker.line=FALSE);
devtools::install_local('~/Documents/awsomicsR/')
